---

- name: Install all required packages
  ansible.builtin.package:
    name:
      - rsync
      - gzip
      - tar
    state: present

- name: Lookup alternative system & architecture
  ansible.builtin.set_fact:
    github_cli_system: "{{ github_cli['system'][ansible_system] }}"
    github_cli_architecture: "{{ github_cli['architecture'][ansible_architecture] | default(ansible_architecture) }}"

- name: Get github_cli version installed
  ansible.builtin.shell: |
    set -o pipefail
    {{ github_cli_path }} --version | awk '/gh version/ {print $3}'
  changed_when: no
  failed_when: no
  register: github_cli_version_installed

- name: Set installed version as fact
  ansible.builtin.set_fact:
    github_cli_version_installed: "{{ 'N/A' if github_cli_version_installed.stdout | length == 0 else 'v' + github_cli_version_installed.stdout }}"

- name: Get latest github_cli release info
  ansible.builtin.uri:
    url: "{{ github_cli_api + '/releases/latest' }}"
  check_mode: no
  register: github_cli_version_info

- name: Get latest release tag
  ansible.builtin.set_fact:
    github_cli_version_latest: "{{ github_cli_version_info.json.tag_name }}"

- name: Replace 'latest' by the actual version
  ansible.builtin.set_fact:
    github_cli_version: "{{ github_cli_version_latest }}"
  when: github_cli_version == 'latest'

- name: Get all github_cli releases info
  ansible.builtin.uri:
    url: "{{ github_cli_api + '/releases?per_page=1000' }}"
  check_mode: no
  register: github_cli_version_info

- name: Get version information
  ansible.builtin.set_fact:
    github_cli_version_info: "{{ github_cli_version_info.json | json_query(qq) | first }}"
  vars:
    qq: "[?tag_name=='{{ github_cli_version }}']"

- name: Construct filename based on the system & architecture
  ansible.builtin.set_fact:
    github_cli_file: "gh_{{ github_cli_version | regex_replace('^v') }}_{{ github_cli_system }}_{{ github_cli_architecture }}.tar.gz"

- name: Show github_cli release
  ansible.builtin.debug:
    msg:
      - "github_cli latest release    : {{ github_cli_version_latest }}"
      - "github_cli requested release : {{ github_cli_version }}"
      - "github_cli installed release : {{ github_cli_version_installed }}"

- name: Get binary location
  ansible.builtin.set_fact:
    github_cli_url: "{{ github_cli_version_info.assets | json_query(qq) | first }}"
  vars:
    qq: "[?name=='{{ github_cli_file }}'].browser_download_url"

- name: Download & extract github cli
  ansible.builtin.unarchive:
    src: "{{ github_cli_url }}"
    dest: /tmp
    remote_src: yes
  check_mode: false
  changed_when: false

- name: Copy files to /usr
  ansible.posix.synchronize:
    src: /tmp/{{ github_cli_file | regex_replace('\.tar.gz') }}/
    dest: /usr
  delegate_to: "{{ inventory_hostname }}"
